{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n  const collectionRef = firestore.collection('collections');\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n    this.setState({\n      loading: false\n    });\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/Marine/Development/react-eshop/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","firestore","collection","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","dispatch","fetchCollectionsSuccess","setState","loading","catch","error","fetchCollectionsFailure","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AAEAF,EAAAA,aAAa,CACRG,GADL,GAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd,UAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAG,IAAAA,QAAQ,CAACC,uBAAuB,CAACH,cAAD,CAAxB,CAAR;AACA,SAAKI,QAAL,CAAc;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAd;AACH,GANL,EAOKC,KAPL,CAOWC,KAAK,IAAIL,QAAQ,CAACM,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAP5B;AAQH;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMrB,SAAS,CACXC,eAAe,CAACqB,uBADL,EAEXpB,qBAFW,CAAf;AAIH","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\n\nexport function* fetchCollectionsAsync() {\n    yield console.log('I am fired');\n\n    const collectionRef = firestore.collection('collections');\n\n    collectionRef\n        .get()\n        .then(snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            dispatch(fetchCollectionsSuccess(collectionsMap));\n            this.setState({ loading: false });\n        })\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(\n        ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    );\n}\n"]},"metadata":{},"sourceType":"module"}